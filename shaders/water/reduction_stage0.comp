#version 450
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 256) in;

layout(set = 0, binding = 0) buffer DisplacementsAndNormalsOut { vec4 displacementsAndNormals[]; };
layout(set = 0, binding = 1) buffer MinOutput { float minOut[]; };
layout(set = 0, binding = 2) buffer MaxOutput { float maxOut[]; };

layout(push_constant) uniform PushConstants {
    uint inputSize;
};

shared float localMin[256];
shared float localMax[256];

void main() {
    uint idx = gl_GlobalInvocationID.x;
    float height;

    // Initialize local values
    if (idx < inputSize) {
        height = displacementsAndNormals[idx].y;
        localMin[gl_LocalInvocationID.x] = height;
        localMax[gl_LocalInvocationID.x] = height;
    } else {
        localMin[gl_LocalInvocationID.x] = 1.0e38f; // FLT_MAX approximation
        localMax[gl_LocalInvocationID.x] = -1.0e38f; // -FLT_MAX approximation
    }
    barrier();

#ifdef USE_SUBGROUP_OPS
    // Subgroup reduction
    if (gl_SubgroupSize >= 256) {
        float minVal = subgroupMin(localMin[gl_LocalInvocationID.x]);
        float maxVal = subgroupMax(localMax[gl_LocalInvocationID.x]);
        if (gl_LocalInvocationID.x == 0) {
            minOut[gl_WorkGroupID.x] = minVal;
            maxOut[gl_WorkGroupID.x] = maxVal;
        }
    } else {
        // Fallback: Manual reduction
        for (uint stride = 128; stride > 0; stride /= 2) {
            if (gl_LocalInvocationID.x < stride) {
                localMin[gl_LocalInvocationID.x] = min(localMin[gl_LocalInvocationID.x], localMin[gl_LocalInvocationID.x + stride]);
                localMax[gl_LocalInvocationID.x] = max(localMax[gl_LocalInvocationID.x], localMax[gl_LocalInvocationID.x + stride]);
            }
            barrier();
        }
        if (gl_LocalInvocationID.x == 0) {
            minOut[gl_WorkGroupID.x] = localMin[0];
            maxOut[gl_WorkGroupID.x] = localMax[0];
        }
    }
#else
    // Manual reduction
    for (uint stride = 128; stride > 0; stride /= 2) {
        if (gl_LocalInvocationID.x < stride) {
            localMin[gl_LocalInvocationID.x] = min(localMin[gl_LocalInvocationID.x], localMin[gl_LocalInvocationID.x + stride]);
            localMax[gl_LocalInvocationID.x] = max(localMax[gl_LocalInvocationID.x], localMax[gl_LocalInvocationID.x + stride]);
        }
        barrier();
    }
    if (gl_LocalInvocationID.x == 0) {
        minOut[gl_WorkGroupID.x] = localMin[0];
        maxOut[gl_WorkGroupID.x] = localMax[0];
    }
#endif
}
