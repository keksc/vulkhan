#version 450

// Workgroup size (matches [numthreads(8,8,1)])
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

#define PI 3.14159265358979323846

// _InitialSpectrumTextures: RWTexture2DArray<float4> in Unity
layout(binding = 2, rgba32f) uniform image2DArray _InitialSpectrumTextures;

// Uniform parameters packed in a block (binding can be adjusted)
layout(std140, binding = 6) uniform Params {
    float _FrameTime;
    float _DeltaTime;
    float _A;
    float _Gravity;
    float _RepeatTime;
    float _Damping;
    float _Depth;
    float _LowCutoff;
    float _HighCutoff;
    int   _Seed;
    vec2  _Wind;
    vec2  _Lambda;
    vec2  _NormalStrength;
    uint  _N;
    uint  _LengthScale0;
    uint  _LengthScale1;
    uint  _LengthScale2;
    uint  _LengthScale3;
    float _FoamBias;
    float _FoamDecayRate;
    float _FoamAdd;
    float _FoamThreshold;
};

// SpectrumParameters structure and buffer (_Spectrums from Unity)
struct SpectrumParameters {
    float scale;
    float angle;
    float spreadBlend;
    float swell;
    float alpha;
    float peakOmega;
    float gamma;
    float shortWavesFade;
};
layout(std430, binding = 7) readonly buffer SpectrumBuffer {
    SpectrumParameters _Spectrums[];
};

// Helper functions (converted from HLSL to GLSL)
float hash(uint n) {
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & 0x7fffffffU) / float(0x7fffffffU);
}

vec2 UniformToGaussian(float u1, float u2) {
    float R = sqrt(-2.0 * log(u1));
    float theta = 2.0 * PI * u2;
    return vec2(R * cos(theta), R * sin(theta));
}

float Dispersion(float kMag) {
    return sqrt(_Gravity * kMag * tanh(min(kMag * _Depth, 20.0)));
}

float DispersionDerivative(float kMag) {
    float th = tanh(min(kMag * _Depth, 20.0));
    float ch = cosh(kMag * _Depth);
    return _Gravity * ((_Depth * kMag / (ch * ch)) + th) / (2.0 * Dispersion(kMag));
}

float JONSWAP(float omega, SpectrumParameters spectrum) {
    float sigma = (omega <= spectrum.peakOmega) ? 0.07 : 0.09;
    float r = exp(-pow(omega - spectrum.peakOmega, 2.0) / (2.0 * sigma * sigma * pow(spectrum.peakOmega, 2.0)));
    return spectrum.scale * _Gravity * _Gravity *
           pow(1.0 / omega, 5.0) *
           exp(-1.25 * pow(spectrum.peakOmega / omega, 4.0)) *
           pow(abs(spectrum.gamma), r);
}

float DirectionSpectrum(float theta, float omega, SpectrumParameters spectrum) {
    // A simplified version using mix (HLSL's lerp becomes mix in GLSL)
    return mix(2.0 / PI * cos(theta) * cos(theta), 1.0, spectrum.spreadBlend);
}

float ShortWavesFade(float kLength, SpectrumParameters spectrum) {
    return exp(-spectrum.shortWavesFade * spectrum.shortWavesFade * kLength * kLength);
}

// Entry point equivalent to Unity's CS_InitializeSpectrum
void main() {
    uvec3 id = gl_GlobalInvocationID;
    uint seed = id.x + _N * id.y + _N;
    seed += uint(_Seed);
    
    uint lengthScales[4];
    lengthScales[0] = _LengthScale0;
    lengthScales[1] = _LengthScale1;
    lengthScales[2] = _LengthScale2;
    lengthScales[3] = _LengthScale3;
    
    float halfN = float(_N) / 2.0;
    
    // Loop over the four spectrum channels
    for (uint i = 0u; i < 4u; ++i) {
        float deltaK = 2.0 * PI / float(lengthScales[i]);
        vec2 K = (vec2(id.xy) - vec2(halfN)) * deltaK;
        float kLength = length(K);
        
        seed += i + uint(hash(seed) * 10.0);
        float u1 = hash(seed);
        float u2 = hash(seed * 2u);
        float u3 = hash(seed * 3u);
        float u4 = hash(seed * 4u);
        vec2 gauss1 = UniformToGaussian(u1, u2);
        vec2 gauss2 = UniformToGaussian(u3, u4);
        
        if (_LowCutoff <= kLength && kLength <= _HighCutoff) {
            float kAngle = atan(K.y, K.x);
            float omega = Dispersion(kLength);
            float dOmegadk = DispersionDerivative(kLength);
            
            float spectrum = JONSWAP(omega, _Spectrums[i * 2]) *
                             DirectionSpectrum(kAngle, omega, _Spectrums[i * 2]) *
                             ShortWavesFade(kLength, _Spectrums[i * 2]);
            if (_Spectrums[i * 2 + 1].scale > 0.0)
                spectrum += JONSWAP(omega, _Spectrums[i * 2 + 1]) *
                            DirectionSpectrum(kAngle, omega, _Spectrums[i * 2 + 1]) *
                            ShortWavesFade(kLength, _Spectrums[i * 2 + 1]);
            
            vec2 value = vec2(gauss2.x, gauss1.y) *
                         sqrt(2.0 * spectrum * abs(dOmegadk) / kLength * deltaK * deltaK);
            imageStore(_InitialSpectrumTextures, ivec3(id.xy, int(i)), vec4(value, 0.0, 0.0));
        } else {
            imageStore(_InitialSpectrumTextures, ivec3(id.xy, int(i)), vec4(0.0));
        }
    }
}
